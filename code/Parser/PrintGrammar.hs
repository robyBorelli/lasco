-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintGrammar.

module Parser.PrintGrammar where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span, error, show
  )
import Data.Char ( Char, isSpace )
import qualified Parser.AbsGrammar as AbsGrammar

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  --new j ts = showChar '\n' . rend j True ts
  new j ts = id . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  --onNewLine i p = (if p then id else showChar '\n') . indent i
  onNewLine i p = (if p then id else id) . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGrammar.VariableSymbol where
  prt _ (AbsGrammar.VariableSymbol i) = doc $ showString i
instance Print AbsGrammar.BasicSymbol where
  prt _ (AbsGrammar.BasicSymbol i) = doc $ showString i
instance Print AbsGrammar.Program where
  prt i = \case
    AbsGrammar.Task declarations -> prPrec i 0 (concatD [prt 0 declarations])

instance Print AbsGrammar.Declaration where
  prt i = \case
    AbsGrammar.AspRule aspdeclaration -> prPrec i 0 (concatD [prt 0 aspdeclaration])
    AbsGrammar.PositiveExample example -> prPrec i 0 (concatD [doc (showString "#pos"), prt 0 example])
    AbsGrammar.NegativeExample example -> prPrec i 0 (concatD [doc (showString "#neg"), prt 0 example])
    AbsGrammar.Hypothesis _ n aspdeclaration -> prPrec i 0 (concatD [prt 0 n, doc (showString "~"), prt 0 aspdeclaration])
    AbsGrammar.Comment str -> prPrec i 0 (concatD [doc (showString "\n%% "), doc (showString str)])
    AbsGrammar.ShowAtom symb n -> prPrec i 0 (concatD [doc (showString "#show"), prt 0 symb, doc (showString "/"), prt 0 n])
    AbsGrammar.ShowTerm symb ls -> prPrec i 0 (concatD [doc (showString "#show"), prt 0 symb, doc (showString ":"), prt 0 ls])
    AbsGrammar.ShowNothing -> prPrec i 0 (concatD [doc (showString "#show")])
    AbsGrammar.Minimize items-> prPrec i 0 (concatD [doc (showString "#minimize{"), prt 0 items, doc (showString "}")])
    AbsGrammar.WeakContraint atoms w l idx->prPrec i 0 (concatD [doc (showString ":~"), prt 0 atoms, doc (showString (". ["++ show w ++ "@"++show l++","++show idx++"] %%" ))])
instance Print AbsGrammar.AspDeclaration where
  prt i = \case
    AbsGrammar.NormalRule h [] -> prPrec i 0 (concatD [prt 0 h])
    AbsGrammar.NormalRule h literals -> prPrec i 0 (concatD [prt 0 h, doc (showString ":-"), prt 0 literals])
    AbsGrammar.Fact atom -> prPrec i 0 (concatD [prt 0 atom])
    AbsGrammar.Denial literals -> prPrec i 0 (concatD [doc (showString ":-"), prt 0 literals])
    AbsGrammar.Range basicsymbol n1 n2 -> prPrec i 0 (concatD [prt 0 basicsymbol, doc (showString "("), prt 0 n1, doc (showString ".."), prt 0 n2, doc (showString ")")])
    AbsGrammar.GroundChoiceRule     atoms lits -> prPrec i 0 (concatD [doc (showString "{"), prt 0 (map (AbsGrammar.SimpleChoiceElem) atoms), doc (showString "}"), doc (showString ":-"), prt 0 lits])
    AbsGrammar.GroundCardRuleLB     a lb lits -> prPrec i 0 (concatD [prt 0 a, doc (showString ":-"), doc (showString (show lb)), doc (showString "{"),  prt 0 lits,  doc (showString "}")])
    AbsGrammar.GroundCardRuleLBUB   a lb lits ub -> prPrec i 0 (concatD [prt 0 a, doc (showString ":-"), doc (showString (show lb)), doc (showString "{"),  prt 0 lits,  doc (showString "}"), doc (showString (show ub))])
    AbsGrammar.GroundCardConstraint lb litsHead ub litsBody -> prPrec i 0 (concatD [doc (showString (show lb)), doc (showString "{"), prt 0 (map (AbsGrammar.FakeChoiceElem) litsHead), doc (showString "}"), doc (showString (show ub)), doc (showString ":-"), prt 0 litsBody])

instance Print AbsGrammar.Head where
  prt i = \case
    AbsGrammar.SimpleHead atom -> prPrec i 0 (concatD [prt 0 atom])
    AbsGrammar.ChoiceHead bound1 choiceelems bound2 -> prPrec i 0 (concatD [prt 0 bound1, doc (showString "{"), prt 0 choiceelems, doc (showString "}"), prt 0 bound2])
    AbsGrammar.DisjunctiveHead atoms -> prPrec i 0 (concatD [printDisHead atoms])

printDisHead [] = concatD []
printDisHead [x] = concatD [prt 0 x]
printDisHead (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print AbsGrammar.Bound where
  prt i = \case
    AbsGrammar.ExplicitBound n -> prPrec i 0 (concatD [prt 0 n])
    AbsGrammar.ImplicitBound -> prPrec i 0 (concatD [])

instance Print AbsGrammar.ChoiceElem where
  prt i = \case
    AbsGrammar.GuardedChoiceElem atom literals -> prPrec i 0 (concatD [prt 0 atom, doc (showString ":"), prt 0 literals])
    AbsGrammar.SimpleChoiceElem atom -> prPrec i 0 (concatD [prt 0 atom])
    AbsGrammar.FakeChoiceElem lit -> prPrec i 0 (concatD [prt 0 lit])

instance Print AbsGrammar.Atom where
  prt i = \case
    AbsGrammar.SimpleAtom basicsymbol -> prPrec i 0 (concatD [prt 0 basicsymbol])
    AbsGrammar.CompositeAtom basicsymbol terms -> prPrec i 0 (concatD [prt 0 basicsymbol, doc (showString "("), prt 0 terms, doc (showString ")")])

instance Print AbsGrammar.Term where
  prt i = \case
    AbsGrammar.Constant basicsymbol -> prPrec i 0 (concatD [prt 0 basicsymbol])
    AbsGrammar.ArithmeticTerm arithmeticexpr -> prPrec i 0 (concatD [prt 0 arithmeticexpr])
    AbsGrammar.StringTerm str -> prPrec i 0 (concatD [printString str])
    AbsGrammar.TupleTerm term terms -> prPrec i 0 (concatD [doc (showString "("), prt 0 term, doc (showString ","), prt 0 terms, doc (showString ")")])
    AbsGrammar.FunctionalTerm atom -> prPrec i 0 (concatD [prt 0 atom])

instance Print AbsGrammar.Literal where
  prt i = \case
    AbsGrammar.PositiveLiteral atom -> prPrec i 0 (concatD [prt 0 atom])
    AbsGrammar.NegativeLiteral atom -> prPrec i 0 (concatD [doc (showString "not"), prt 0 atom])
    AbsGrammar.ComparisonLiteral term1 compop term2 -> prPrec i 0 (concatD [prt 0 term1, prt 0 compop, prt 0 term2])

instance Print AbsGrammar.CompOp where
  prt i = \case
    AbsGrammar.CompOpLe -> prPrec i 0 (concatD [doc (showString "<")])
    AbsGrammar.CompOpLeq -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsGrammar.CompOpGe -> prPrec i 0 (concatD [doc (showString ">")])
    AbsGrammar.CompOpGeq -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsGrammar.CompOpEq -> prPrec i 0 (concatD [doc (showString "=")])
    AbsGrammar.CompOpEqq -> prPrec i 0 (concatD [doc (showString "==")])
    AbsGrammar.CompOpNeq -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print AbsGrammar.ArithmeticExpr where
  prt i = \case
    AbsGrammar.AddExpr arithmeticexpr1 arithmeticexpr2 -> prPrec i 0 (concatD [prt 0 arithmeticexpr1, doc (showString "+"), prt 1 arithmeticexpr2])
    AbsGrammar.SubExpr arithmeticexpr1 arithmeticexpr2 -> prPrec i 0 (concatD [prt 0 arithmeticexpr1, doc (showString "-"), prt 1 arithmeticexpr2])
    AbsGrammar.MulExpr arithmeticexpr1 arithmeticexpr2 -> prPrec i 1 (concatD [prt 1 arithmeticexpr1, doc (showString "*"), prt 2 arithmeticexpr2])
    AbsGrammar.DivExpr arithmeticexpr1 arithmeticexpr2 -> prPrec i 1 (concatD [prt 1 arithmeticexpr1, doc (showString "/"), prt 2 arithmeticexpr2])
    AbsGrammar.NegExpr arithmeticexpr -> prPrec i 2 (concatD [doc (showString "-"), prt 3 arithmeticexpr])
    AbsGrammar.AbsExpr arithmeticexpr -> prPrec i 3 (concatD [doc (showString "|"), prt 4 arithmeticexpr, doc (showString "|")])
    AbsGrammar.Variable variablesymbol -> prPrec i 4 (concatD [prt 0 variablesymbol])
    AbsGrammar.IntExpr n -> prPrec i 4 (concatD [prt 0 n])

instance Print AbsGrammar.Example where
  prt i = \case
    AbsGrammar.LasExample atoms1 atoms2 -> prPrec i 0 (concatD [doc (showString "("), doc (showString "{"), prt 0 atoms1, doc (showString "}"), doc (showString ","), doc (showString "{"), prt 0 atoms2, doc (showString "}"), doc (showString ")")])
    AbsGrammar.LasCtxExample atoms1 atoms2 aspdeclarations -> prPrec i 0 (concatD [doc (showString "("), doc (showString "{"), prt 0 atoms1, doc (showString "}"), doc (showString ","), doc (showString "{"), prt 0 atoms2, doc (showString "}"), doc (showString ","), doc (showString "{"), prt 0 aspdeclarations, doc (showString "}"), doc (showString ")")])

instance Print [AbsGrammar.Literal] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGrammar.Atom] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [(Integer,Integer,AbsGrammar.Atom)] where
  prt _ [] = concatD []
  prt _ [(n,idx,a)] = concatD [prt 0 n, doc (showString ","), prt 0 idx, doc(showString ":"), prt 0 a]
  prt _ (x:xs) = concatD [prt 0 [x], doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.ChoiceElem] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.AspDeclaration] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ".\n"), prt 0 xs]

instance Print [AbsGrammar.Term] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGrammar.Declaration] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x, doc (showString ".\n")]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ".\n"), prt 0 xs]
