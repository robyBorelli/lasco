-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language grammar.

module Parser.AbsGrammar where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Task [Declaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Declaration
    = AspRule AspDeclaration
    | PositiveExample Example
    | NegativeExample Example
    | Hypothesis Integer Integer AspDeclaration
    | Comment String
    | ShowAtom BasicSymbol Integer
    | ShowTerm Term [Literal]
    | ShowNothing
    | Minimize [(Integer,Integer, Atom)]
    | WeakContraint [Atom] Integer Integer Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AspDeclaration
    = NormalRule Head [Literal]
    | Fact Atom
    | Denial [Literal]
    | Range BasicSymbol Integer Integer
    | GroundChoiceRule     [Atom] [Literal]
    | GroundCardRuleLB     Atom Integer [Literal]
    | GroundCardRuleLBUB   Atom Integer [Literal] Integer
    | GroundCardConstraint Integer [Literal] Integer [Literal]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Head = SimpleHead Atom | ChoiceHead Bound [ChoiceElem] Bound
          | DisjunctiveHead [Atom]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Bound = ExplicitBound Integer | ImplicitBound
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ChoiceElem
    = GuardedChoiceElem Atom [Literal] | SimpleChoiceElem Atom
    | FakeChoiceElem Literal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Atom
    = SimpleAtom BasicSymbol | CompositeAtom BasicSymbol [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term
    = Constant BasicSymbol
    | ArithmeticTerm ArithmeticExpr
    | StringTerm String
    | TupleTerm Term [Term]
    | FunctionalTerm Atom
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal
    = PositiveLiteral Atom
    | NegativeLiteral Atom
    | ComparisonLiteral Term CompOp Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompOp
    = CompOpLe
    | CompOpLeq
    | CompOpGe
    | CompOpGeq
    | CompOpEq
    | CompOpEqq
    | CompOpNeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArithmeticExpr
    = AddExpr ArithmeticExpr ArithmeticExpr
    | SubExpr ArithmeticExpr ArithmeticExpr
    | MulExpr ArithmeticExpr ArithmeticExpr
    | DivExpr ArithmeticExpr ArithmeticExpr
    | NegExpr ArithmeticExpr
    | AbsExpr ArithmeticExpr
    | Variable VariableSymbol
    | IntExpr Integer 
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Example
    = LasExample [Atom] [Atom]
    | LasCtxExample [Atom] [Atom] [AspDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype VariableSymbol = VariableSymbol String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype BasicSymbol = BasicSymbol String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

